// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          String    @default("user") // user, admin
  credits       Int       @default(100) // Starting credits
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  aiJobs        AIJob[]
  workflows     Workflow[]
  workflowExecutions WorkflowExecution[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  type        String   // credit_purchase, credit_used, refund
  amount      Int      // positive for purchase, negative for usage
  balance     Int      // balance after transaction
  description String
  metadata    String?  @db.Text // JSON metadata
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AIJob {
  id          String   @id @default(cuid())
  userId      String
  type        String   // outfit_changer, pose_generator, expression_editor, etc.
  status      String   @default("pending") // pending, processing, completed, failed
  inputUrl    String   @db.Text
  outputUrl   String?  @db.Text
  parameters  String?  @db.Text // JSON parameters
  creditsCost Int
  error       String?  @db.Text
  workflowId  String?  // If part of a workflow
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow    Workflow? @relation(fields: [workflowId], references: [id], onDelete: SetNull)
  versions    JobVersion[]

  @@index([userId])
  @@index([status])
  @@index([workflowId])
}

// Workflow template that can be saved and reused
model Workflow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  steps       String   @db.Text // JSON array of workflow steps
  totalCredits Int     // Total credit cost for entire workflow
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs        AIJob[]
  executions  WorkflowExecution[]

  @@index([userId])
  @@index([isPublic])
  @@index([isTemplate])
}

// Track each time a workflow is executed
model WorkflowExecution {
  id          String   @id @default(cuid())
  workflowId  String
  userId      String
  status      String   @default("pending") // pending, processing, completed, failed
  currentStep Int      @default(0)
  inputUrl    String   @db.Text
  outputUrl   String?  @db.Text
  totalCredits Int
  error       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([userId])
  @@index([status])
}

// Version history for each job
model JobVersion {
  id          String   @id @default(cuid())
  jobId       String
  version     Int
  outputUrl   String   @db.Text
  parameters  String?  @db.Text
  note        String?  @db.Text // User notes for this version
  createdAt   DateTime @default(now())

  job         AIJob    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, version])
  @@index([jobId])
}
